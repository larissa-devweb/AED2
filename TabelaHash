üíª Exerc√≠cio Pr√°tico ‚Äî Implementa√ß√£o de uma Tabela Hash com Dupla Fun√ß√£o de Dispers√£o

Disciplina: Algoritmos e Estruturas de Dados II
Tema: Tabelas de Dispers√£o (Hash Tables)
Linguagem: C
üéØ Objetivo

Implementar uma tabela de dispers√£o (hash table) em linguagem C, utilizando:

    Hashing duplo para tratamento de colis√µes;

    Re-hash din√¢mico quando a tabela estiver cheia;

    Fun√ß√µes para inser√ß√£o, busca e remo√ß√£o de elementos;

    Dados reais provenientes do l√©xico OpLexicon, armazenando informa√ß√µes completas para cada palavra.

üß© Descri√ß√£o Geral

O exerc√≠cio consiste em construir uma tabela hash para armazenar os registros do l√©xico OpLexicon, em que cada palavra ser√° usada como chave e todas as outras informa√ß√µes associadas (como polaridade e categoria gramatical) ser√£o os dados armazenados.

A implementa√ß√£o deve considerar colis√µes, ocupa√ß√£o de posi√ß√µes, remo√ß√µes e realoca√ß√£o quando a capacidade for excedida.
‚öôÔ∏è Requisitos de Implementa√ß√£o

    Estrutura principal

        A tabela deve ser implementada sobre um arranjo (vetor).

        Cada posi√ß√£o do arranjo deve conter:

            a chave (palavra),

            os dados associados (todas as outras colunas do l√©xico),

            e marcadores que indiquem se a posi√ß√£o est√°:

                nunca ocupada,

                atualmente ocupada, ou

                removida.

    Fun√ß√£o Hash Prim√°ria ‚Äì Polynomial Rolling Hash

A primeira fun√ß√£o hash, ( h_1(k) ), deve ser baseada na polynomial rolling hash, amplamente utilizada para chaves do tipo string.

Seja a palavra ( k = c_0c_1c_2...c_{n-1} ), em que cada ( c_i ) √© o valor num√©rico (por exemplo, c√≥digo ASCII) do caractere.
A fun√ß√£o √© dada por:

onde:

    ( p ) √© uma constante base (tipicamente 31 ou 53),

    ( m ) √© o tamanho atual da tabela hash (n√∫mero de posi√ß√µes do arranjo).

    Fun√ß√£o Hash Secund√°ria ‚Äì Somat√≥rio dos c√≥digos dos caracteres

A segunda fun√ß√£o hash, ( h_2(k) ), deve ser uma fun√ß√£o simples obtida pela soma dos c√≥digos num√©ricos dos caracteres da chave:

Essa fun√ß√£o √© usada para determinar o deslocamento em caso de colis√£o.

    Tratamento de colis√µes ‚Äì Double Hashing

Em caso de colis√£o, deve-se aplicar a t√©cnica de hashing duplo, recalculando o √≠ndice da seguinte forma:

onde:

    ( t ) √© o n√∫mero de tentativas de inser√ß√£o (0, 1, 2, ...).

O processo continua at√© encontrar uma posi√ß√£o livre ou at√© constatar que a tabela est√° cheia.

    Opera√ß√µes obrigat√≥rias
    O programa deve permitir:

    Inserir uma nova palavra e seus dados;

    Buscar uma palavra e exibir seus dados;

    Remover uma palavra, marcando a posi√ß√£o como removida (sem apagar fisicamente o registro, para n√£o quebrar o encadeamento de sondagens).

    Redimensionamento (Re-hash din√¢mico)

Quando o n√∫mero de elementos ocupados atingir a capacidade m√°xima do arranjo, o sistema deve:

    Criar um novo arranjo com o dobro do tamanho atual;

    Reinserir todas as entradas v√°lidas (n√£o removidas) na nova tabela, aplicando novamente ( h_1 ) e ( h_2 ) considerando o novo valor de ( m ).

    Leitura dos dados

Os dados devem ser lidos a partir do arquivo do l√©xico OpLexicon, dispon√≠vel publicamente.
A chave ser√° a palavra, e o valor associado ser√° a concatena√ß√£o das demais colunas (polaridade, tipo de palavra, dom√≠nio, etc.).
üß† Aspectos a serem avaliados

    Corre√ß√£o da implementa√ß√£o das fun√ß√µes h1(k)  e  h_2(k);

    Funcionamento adequado do tratamento de colis√µes via double hashing;

    Corretude das opera√ß√µes de inser√ß√£o, busca e remo√ß√£o;

    Implementa√ß√£o correta do redimensionamento e reinser√ß√£o;

    Clareza e modulariza√ß√£o do c√≥digo.

üí° Sugest√µes

    Escolha valores adequados de ( p ) e ( m ) para evitar agrupamentos (clustering);

    Monitore a taxa de ocupa√ß√£o da tabela (load factor);

    Garanta que o programa n√£o entre em la√ßos infinitos em caso de colis√µes sucessivas;

    Mantenha um controle de mem√≥ria apropriado.
